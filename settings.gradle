String dirName = rootProject.projectDir.name
rootProject.name = dirName

List projects = [
  'build-tools',
  'rest-api-spec',
  'docs',
  'client:rest',
  'client:rest-high-level',
  'client:sniffer',
  'client:transport',
  'client:test',
  'client:client-benchmark-noop-api-plugin',
  'client:benchmark',
  'benchmarks',
  'distribution:integ-test-zip',
  'distribution:zip',
  'distribution:tar',
  'distribution:deb',
  'distribution:rpm',
  'distribution:tools:launchers',
  'distribution:tools:plugin-cli',
  'server',
  'server:cli',
  'test:framework',
  'test:fixtures:example-fixture',
  'test:fixtures:hdfs-fixture',
  'test:fixtures:krb5kdc-fixture',
  'test:fixtures:old-elasticsearch',
  'test:logger-usage'
]

/**
  * Iterates over sub directories, looking for build.gradle, and adds a project if found
  * for that dir with the given path prefix. Note that this requires each level
  * of the dir hierarchy to have a build.gradle. Otherwise we would have to iterate
  * all files/directories in the source tree to find all projects.
  */
void addSubProjects(String path, File dir, List<String> projects, List<String> branches) {
  if (dir.isDirectory() == false) return;
  if (dir.name == 'buildSrc') return;
  if (new File(dir, 'build.gradle').exists() == false) return;
  if (findProject(dir) != null) return;

  final String projectName = "${path}:${dir.name}"
  include projectName

  if (dir.name == 'bwc-snapshot-dummy-projects') {
    for (final String branch : branches) {
      final String snapshotProjectName = "${projectName}:bwc-snapshot-${branch}"
      projects.add(snapshotProjectName)
      include snapshotProjectName
      project("${snapshotProjectName}").projectDir = dir
    }
    // TODO do we want to assert that there's nothing else in the bwc directory?
  } else {
    if (path.isEmpty() || path.startsWith(':example-plugins')) {
      project(projectName).projectDir = dir
    }
    for (File subdir : dir.listFiles()) {
      addSubProjects(projectName, subdir, projects, branches)
    }
  }
}

// include example plugins first, so adding plugin dirs below won't muck with :example-plugins
File examplePluginsDir = new File(rootProject.projectDir, 'plugins/examples')
for (File example : examplePluginsDir.listFiles()) {
  if (example.isDirectory() == false) continue;
  if (example.name.startsWith('build') || example.name.startsWith('.')) continue;
  addSubProjects(':example-plugins', example, projects, [])
}
project(':example-plugins').projectDir = new File(rootProject.projectDir, 'plugins/examples')

addSubProjects('', new File(rootProject.projectDir, 'libs'), projects, [])
addSubProjects('', new File(rootProject.projectDir, 'modules'), projects, [])
addSubProjects('', new File(rootProject.projectDir, 'plugins'), projects, [])
addSubProjects('', new File(rootProject.projectDir, 'qa'), projects, [])

/* Create projects for building BWC snapshot distributions from the heads of other branches */
final List<String> branches = ['5.6', '6.0', '6.1', '6.2', '6.x']
for (final String branch : branches) {
  projects.add("distribution:bwc-snapshot-${branch}".toString())
}

boolean isEclipse = System.getProperty("eclipse.launcher") != null || gradle.startParameter.taskNames.contains('eclipse') || gradle.startParameter.taskNames.contains('cleanEclipse')
if (isEclipse) {
  // eclipse cannot handle an intermediate dependency between main and test, so we must create separate projects
  // for server-src and server-tests
  projects << 'server-tests'
  projects << 'libs:elasticsearch-core-tests'
  projects << 'libs:elasticsearch-nio-tests'
  projects << 'libs:secure-sm-tests'
}

include projects.toArray(new String[0])

project(':build-tools').projectDir = new File(rootProject.projectDir, 'buildSrc')

/* The BWC snapshot projects share the same build directory and build file,
 * but apply to different backwards compatibility branches. */
for (final String branch : branches) {
  project(":distribution:bwc-snapshot-${branch}").projectDir = new File(rootProject.projectDir, 'distribution/bwc')
}

if (isEclipse) {
  project(":server").projectDir = new File(rootProject.projectDir, 'server/src/main')
  project(":server").buildFileName = 'eclipse-build.gradle'
  project(":server-tests").projectDir = new File(rootProject.projectDir, 'server/src/test')
  project(":server-tests").buildFileName = 'eclipse-build.gradle'
  project(":libs:elasticsearch-core").projectDir = new File(rootProject.projectDir, 'libs/elasticsearch-core/src/main')
  project(":libs:elasticsearch-core").buildFileName = 'eclipse-build.gradle'
  project(":libs:elasticsearch-core-tests").projectDir = new File(rootProject.projectDir, 'libs/elasticsearch-core/src/test')
  project(":libs:elasticsearch-core-tests").buildFileName = 'eclipse-build.gradle'
  project(":libs:elasticsearch-nio").projectDir = new File(rootProject.projectDir, 'libs/elasticsearch-nio/src/main')
  project(":libs:elasticsearch-nio").buildFileName = 'eclipse-build.gradle'
  project(":libs:elasticsearch-nio-tests").projectDir = new File(rootProject.projectDir, 'libs/elasticsearch-nio/src/test')
  project(":libs:elasticsearch-nio-tests").buildFileName = 'eclipse-build.gradle'
  project(":libs:secure-sm").projectDir = new File(rootProject.projectDir, 'libs/secure-sm/src/main')
  project(":libs:secure-sm").buildFileName = 'eclipse-build.gradle'
  project(":libs:secure-sm-tests").projectDir = new File(rootProject.projectDir, 'libs/secure-sm/src/test')
  project(":libs:secure-sm-tests").buildFileName = 'eclipse-build.gradle'
}

// look for extra plugins for elasticsearch
File extraProjects = new File(rootProject.projectDir.parentFile, "${dirName}-extra")
if (extraProjects.exists()) {
  for (File extraProjectDir : extraProjects.listFiles()) {
    addSubProjects('', extraProjectDir, projects, branches)
  }
}

